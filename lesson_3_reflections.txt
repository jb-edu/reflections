When would you want to use a remote repository rather than keeping all your work local?
  Do this when you want to share your work with others and/or work collaboratively with others.
  It also provides a backup of your work in the event that something happens to your local
  storage device.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You might have a change locally that hasn't been committed yet. If
    git pulls automatically, your changes will be lost.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

    Forks are copies of another user's repository that you use as your
    own, when you do not have permission to modify another user's repository (i.e. you are not a collaborator). Clones are copies of
    your repository that you can use locally and you can have multiple copies locally). Branches exist within a single repository, which
    can be your own repository, or one that you are a collaborator on.

    Use forks when you want to have a copy of someone elses repository
    that you do not have write access to. Use clone when you want to
    copy a repository from GitHub to your local machine, or from one
    location on GitHub or your local machine to another location on
    GitHub or your local machine. Use branching when you want to
    create changes that will not affect the main (master) branch so
    that any adverse affects will not impact your production code.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    This allows you to determine what changes you have added since the
    last known state of the remote repository. Using this, you can also
    determine what is different in your local copy from changes made by
    a collaborator to the online repository.

How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

    Using another version control system. Alternatively, you could
    have a way to communicate which files you are working on and try
    to "lock" those files so that others cannot make changes to them.
    However, this does not mean that files they reference would not be
    changed. It would be easier to upload your changes but much more
    difficult to keep track of changes that might impact each other.

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

    Make changes in a separate branch when you are collaborating with
    others so as to maintain the integrity of the master branch. Make
    changes directly in master when you are the sole contributor.
    Making changes directly in master has the benefit of simplicity
    of updates to the master locally as well as on GitHub, whereas
    merging branches requires additional steps, particularly in the
    case where there are two or more collaborators on a given project.

